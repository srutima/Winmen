1. **Database Schema Design:** - Create tables for students, courses, enrollments, and professors. - students table to include fields: student_id, first_name, last_name, enrollment_date. - courses table to include fields: course_id, course_name, professor_id. - enrollments table to include fields: enrollment_id, student_id, course_id, enrollment_date. - professors table to include fields: professor_id, first_name, last_name, department.
2. **SQL Query Tasks:** - Craft SQL queries to achieve the following objectives: - Retrieve a list of courses along with the professor's name. - Calculate the average number of students enrolled per course. - Find the professor who teaches the most courses. - Identify students who are enrolled in multiple courses. - Determine the total number of students enrolled in a specific course.
3. **Data Relationship Management:** - Establish and maintain relationships between tables using primary and foreign keys. - Normalize the database design to minimize redundancy and ensure data integrity. - Utilize JOIN operations effectively to extract information from interconnected tables.
4. **Advanced SQL Queries:** - Implement subqueries, window functions, and aggregate functions to perform complex data analysis. - Address scenarios involving data aggregation, filtering, and grouping. 
5. **Testing and Documentation:** - Populate the tables with sample data to validate query results. - Document the database schema, query logic, and any assumptions made during the design and query implementation phases. By successfully completing these requirements, you will demonstrate a strong command of managing intricate data relationships, designing normalized databases, and executing advanced SQL queries within a university course management context. This exercise serves as a practical assessment of your database design and SQL querying skills.
